name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
        python-version: ['3.9', '3.10', '3.11']
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[dev]
    
    - name: Validate data files
      run: |
        python scripts/validate_data.py
    
    - name: Run linting
      run: |
        ruff check src/ tests/ --exit-zero
        black --check src/ tests/
    
    - name: Run tests
      run: |
        pytest tests/ -v --tb=short
    
    - name: Test CLI smoke test
      shell: bash
      run: |
        echo "قال الرجل" > test_input.txt
        hassy-normalize test_input.txt --diff
        rm test_input.txt
    
    - name: Test web server startup
      run: |
        timeout 10s hassy-web || true
      shell: bash
      if: matrix.os == 'ubuntu-latest'
    
    - name: Test web server startup (Windows)
      run: |
        Start-Process -FilePath "hassy-web" -NoNewWindow
        Start-Sleep -Seconds 5
        Stop-Process -Name "python" -Force -ErrorAction SilentlyContinue
      shell: powershell
      if: matrix.os == 'windows-latest'

  concurrency-test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[dev]
    
    - name: Run concurrency tests
      run: |
        pytest tests/test_rules.py::test_thread_safety -v
        pytest tests/ -k "concurrency or thread" -v

  build:
    runs-on: ubuntu-latest
    needs: [test, concurrency-test]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history for proper versioning
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine
    
    - name: Build package
      run: |
        python -m build
    
    - name: Check package
      run: |
        twine check dist/*
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: dist
        path: dist/

  # Optional: Deploy to PyPI on tagged releases
  deploy:
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    environment: pypi
    permissions:
      id-token: write  # For trusted publishing
    
    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: dist
        path: dist/
    
    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      # Uncomment when ready for PyPI deployment
      # with:
      #   repository-url: https://upload.pypi.org/legacy/

  docker:
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build Docker image
      run: |
        docker build -t hassy-normalizer:${{ github.sha }} .
    
    - name: Test Docker image
      run: |
        docker run --rm -d -p 8000:8000 --name test-container hassy-normalizer:${{ github.sha }}
        sleep 10
        curl -f http://localhost:8000/healthz || exit 1
        docker stop test-container
    
    # Uncomment when ready for container registry
    # - name: Login to Container Registry
    #   uses: docker/login-action@v3
    #   with:
    #     registry: ghcr.io
    #     username: ${{ github.actor }}
    #     password: ${{ secrets.GITHUB_TOKEN }}
    # 
    # - name: Push Docker image
    #   run: |
    #     docker tag hassy-normalizer:${{ github.sha }} ghcr.io/${{ github.repository }}:latest
    #     docker push ghcr.io/${{ github.repository }}:latest